{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut, updateProfile } from 'firebase/auth';\nimport { getFirestore, doc, setDoc, getDoc, updateDoc, arrayUnion, arrayRemove } from 'firebase/firestore';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDpsag3KQcOyzTiR9Xc_w-yPXnuEyrjtDg\",\n  authDomain: \"ccel-tools.firebaseapp.com\",\n  projectId: \"ccel-tools\",\n  storageBucket: \"ccel-tools.appspot.com\",\n  messagingSenderId: \"653125521567\",\n  appId: \"1:653125521567:web:764b7432f36532279e52aa\",\n  measurementId: \"G-2ZV6ELGWJR\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\n\n// Authentication functions remain the same...\nexport const loginWithEmailAndPassword = async (email, password) => {\n  try {\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    return {\n      user: userCredential.user,\n      error: null\n    };\n  } catch (error) {\n    return {\n      user: null,\n      error: error.message\n    };\n  }\n};\nexport const registerWithEmailAndPassword = async (email, password) => {\n  try {\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    return {\n      user: userCredential.user,\n      error: null\n    };\n  } catch (error) {\n    return {\n      user: null,\n      error: error.message\n    };\n  }\n};\nexport const logoutUser = async () => {\n  try {\n    await signOut(auth);\n    return {\n      error: null\n    };\n  } catch (error) {\n    return {\n      error: error.message\n    };\n  }\n};\n\n// // Highlight functions\n// export const saveHighlight = async (bookId, highlight) => {\n//   const user = auth.currentUser;\n//   if (!user || !bookId) {\n//     console.error('No user logged in or missing bookId');\n//     return { error: 'User must be logged in and bookId is required' };\n//   }\n\n//   try {\n//     // Create a sanitized bookId (remove special characters and spaces)\n//     const sanitizedBookId = bookId.replace(/[^a-zA-Z0-9]/g, '_').toLowerCase();\n\n//     const highlightRef = doc(db, 'users', user.uid, 'books', sanitizedBookId);\n//     const docSnap = await getDoc(highlightRef);\n\n//     if (docSnap.exists()) {\n//       await updateDoc(highlightRef, {\n//         highlights: arrayUnion({\n//           ...highlight,\n//           createdAt: new Date().toISOString()\n//         })\n//       });\n//     } else {\n//       await setDoc(highlightRef, {\n//         highlights: [{\n//           ...highlight,\n//           createdAt: new Date().toISOString()\n//         }],\n//         bookId: sanitizedBookId,\n//         title: bookId, // Store original title\n//         createdAt: new Date().toISOString()\n//       });\n//     }\n\n//     return { error: null };\n//   } catch (error) {\n//     console.error('Save highlight error:', error);\n//     return { error: error.message };\n//   }\n// };\n\n// export const getHighlights = async (bookId) => {\n//   const user = auth.currentUser;\n//   if (!user || !bookId) {\n//     console.error('No user logged in or missing bookId');\n//     return { highlights: [], error: 'User must be logged in and bookId is required' };\n//   }\n\n//   try {\n//     const sanitizedBookId = bookId.replace(/[^a-zA-Z0-9]/g, '_').toLowerCase();\n//     const highlightRef = doc(db, 'users', user.uid, 'books', sanitizedBookId);\n//     const docSnap = await getDoc(highlightRef);\n\n//     if (docSnap.exists()) {\n//       const data = docSnap.data();\n//       return { highlights: data.highlights || [], error: null };\n//     }\n//     return { highlights: [], error: null };\n//   } catch (error) {\n//     console.error('Get highlights error:', error);\n//     return { highlights: [], error: error.message };\n//   }\n// };\n\n// export const removeHighlight = async (bookId, highlightToRemove) => {\n//   const user = auth.currentUser;\n//   if (!user || !bookId) {\n//     console.error('No user logged in or missing bookId');\n//     return { error: 'User must be logged in and bookId is required' };\n//   }\n\n//   try {\n//     const sanitizedBookId = bookId.replace(/[^a-zA-Z0-9]/g, '_').toLowerCase();\n//     const highlightRef = doc(db, 'users', user.uid, 'books', sanitizedBookId);\n\n//     await updateDoc(highlightRef, {\n//       highlights: arrayRemove(highlightToRemove)\n//     });\n\n//     return { error: null };\n//   } catch (error) {\n//     console.error('Remove highlight error:', error);\n//     return { error: error.message };\n//   }\n// };","map":{"version":3,"names":["initializeApp","getAuth","signInWithEmailAndPassword","createUserWithEmailAndPassword","signOut","updateProfile","getFirestore","doc","setDoc","getDoc","updateDoc","arrayUnion","arrayRemove","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","db","loginWithEmailAndPassword","email","password","userCredential","user","error","message","registerWithEmailAndPassword","logoutUser"],"sources":["/Users/souadyakubu/Documents/senior-project/proj/src/services/firebase.js"],"sourcesContent":["import { initializeApp } from 'firebase/app';\nimport { \n  getAuth, \n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  signOut,\n  updateProfile \n} from 'firebase/auth';\nimport { \n  getFirestore, \n  doc, \n  setDoc, \n  getDoc, \n  updateDoc,\n  arrayUnion,\n  arrayRemove \n} from 'firebase/firestore';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDpsag3KQcOyzTiR9Xc_w-yPXnuEyrjtDg\",\n  authDomain: \"ccel-tools.firebaseapp.com\",\n  projectId: \"ccel-tools\",\n  storageBucket: \"ccel-tools.appspot.com\",\n  messagingSenderId: \"653125521567\",\n  appId: \"1:653125521567:web:764b7432f36532279e52aa\",\n  measurementId: \"G-2ZV6ELGWJR\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\n\n// Authentication functions remain the same...\nexport const loginWithEmailAndPassword = async (email, password) => {\n  try {\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    return { user: userCredential.user, error: null };\n  } catch (error) {\n    return { user: null, error: error.message };\n  }\n};\n\nexport const registerWithEmailAndPassword = async (email, password) => {\n  try {\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    return { user: userCredential.user, error: null };\n  } catch (error) {\n    return { user: null, error: error.message };\n  }\n};\n\nexport const logoutUser = async () => {\n  try {\n    await signOut(auth);\n    return { error: null };\n  } catch (error) {\n    return { error: error.message };\n  }\n};\n\n\n\n// // Highlight functions\n// export const saveHighlight = async (bookId, highlight) => {\n//   const user = auth.currentUser;\n//   if (!user || !bookId) {\n//     console.error('No user logged in or missing bookId');\n//     return { error: 'User must be logged in and bookId is required' };\n//   }\n\n//   try {\n//     // Create a sanitized bookId (remove special characters and spaces)\n//     const sanitizedBookId = bookId.replace(/[^a-zA-Z0-9]/g, '_').toLowerCase();\n    \n//     const highlightRef = doc(db, 'users', user.uid, 'books', sanitizedBookId);\n//     const docSnap = await getDoc(highlightRef);\n    \n//     if (docSnap.exists()) {\n//       await updateDoc(highlightRef, {\n//         highlights: arrayUnion({\n//           ...highlight,\n//           createdAt: new Date().toISOString()\n//         })\n//       });\n//     } else {\n//       await setDoc(highlightRef, {\n//         highlights: [{\n//           ...highlight,\n//           createdAt: new Date().toISOString()\n//         }],\n//         bookId: sanitizedBookId,\n//         title: bookId, // Store original title\n//         createdAt: new Date().toISOString()\n//       });\n//     }\n    \n//     return { error: null };\n//   } catch (error) {\n//     console.error('Save highlight error:', error);\n//     return { error: error.message };\n//   }\n// };\n\n// export const getHighlights = async (bookId) => {\n//   const user = auth.currentUser;\n//   if (!user || !bookId) {\n//     console.error('No user logged in or missing bookId');\n//     return { highlights: [], error: 'User must be logged in and bookId is required' };\n//   }\n\n//   try {\n//     const sanitizedBookId = bookId.replace(/[^a-zA-Z0-9]/g, '_').toLowerCase();\n//     const highlightRef = doc(db, 'users', user.uid, 'books', sanitizedBookId);\n//     const docSnap = await getDoc(highlightRef);\n    \n//     if (docSnap.exists()) {\n//       const data = docSnap.data();\n//       return { highlights: data.highlights || [], error: null };\n//     }\n//     return { highlights: [], error: null };\n//   } catch (error) {\n//     console.error('Get highlights error:', error);\n//     return { highlights: [], error: error.message };\n//   }\n// };\n\n// export const removeHighlight = async (bookId, highlightToRemove) => {\n//   const user = auth.currentUser;\n//   if (!user || !bookId) {\n//     console.error('No user logged in or missing bookId');\n//     return { error: 'User must be logged in and bookId is required' };\n//   }\n\n//   try {\n//     const sanitizedBookId = bookId.replace(/[^a-zA-Z0-9]/g, '_').toLowerCase();\n//     const highlightRef = doc(db, 'users', user.uid, 'books', sanitizedBookId);\n    \n//     await updateDoc(highlightRef, {\n//       highlights: arrayRemove(highlightToRemove)\n//     });\n    \n//     return { error: null };\n//   } catch (error) {\n//     console.error('Remove highlight error:', error);\n//     return { error: error.message };\n//   }\n// };"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SACEC,OAAO,EACPC,0BAA0B,EAC1BC,8BAA8B,EAC9BC,OAAO,EACPC,aAAa,QACR,eAAe;AACtB,SACEC,YAAY,EACZC,GAAG,EACHC,MAAM,EACNC,MAAM,EACNC,SAAS,EACTC,UAAU,EACVC,WAAW,QACN,oBAAoB;AAE3B,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,4BAA4B;EACxCC,SAAS,EAAE,YAAY;EACvBC,aAAa,EAAE,wBAAwB;EACvCC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE,2CAA2C;EAClDC,aAAa,EAAE;AACjB,CAAC;;AAED;AACA,MAAMC,GAAG,GAAGrB,aAAa,CAACa,cAAc,CAAC;AACzC,OAAO,MAAMS,IAAI,GAAGrB,OAAO,CAACoB,GAAG,CAAC;AAChC,OAAO,MAAME,EAAE,GAAGjB,YAAY,CAACe,GAAG,CAAC;;AAEnC;AACA,OAAO,MAAMG,yBAAyB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAClE,IAAI;IACF,MAAMC,cAAc,GAAG,MAAMzB,0BAA0B,CAACoB,IAAI,EAAEG,KAAK,EAAEC,QAAQ,CAAC;IAC9E,OAAO;MAAEE,IAAI,EAAED,cAAc,CAACC,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC;EACnD,CAAC,CAAC,OAAOA,KAAK,EAAE;IACd,OAAO;MAAED,IAAI,EAAE,IAAI;MAAEC,KAAK,EAAEA,KAAK,CAACC;IAAQ,CAAC;EAC7C;AACF,CAAC;AAED,OAAO,MAAMC,4BAA4B,GAAG,MAAAA,CAAON,KAAK,EAAEC,QAAQ,KAAK;EACrE,IAAI;IACF,MAAMC,cAAc,GAAG,MAAMxB,8BAA8B,CAACmB,IAAI,EAAEG,KAAK,EAAEC,QAAQ,CAAC;IAClF,OAAO;MAAEE,IAAI,EAAED,cAAc,CAACC,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC;EACnD,CAAC,CAAC,OAAOA,KAAK,EAAE;IACd,OAAO;MAAED,IAAI,EAAE,IAAI;MAAEC,KAAK,EAAEA,KAAK,CAACC;IAAQ,CAAC;EAC7C;AACF,CAAC;AAED,OAAO,MAAME,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAI;IACF,MAAM5B,OAAO,CAACkB,IAAI,CAAC;IACnB,OAAO;MAAEO,KAAK,EAAE;IAAK,CAAC;EACxB,CAAC,CAAC,OAAOA,KAAK,EAAE;IACd,OAAO;MAAEA,KAAK,EAAEA,KAAK,CAACC;IAAQ,CAAC;EACjC;AACF,CAAC;;AAID;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}